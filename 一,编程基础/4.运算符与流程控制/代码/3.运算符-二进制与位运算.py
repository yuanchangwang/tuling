#  二进制 与 位运算

# 十进制数 转为 二进制数
a = 125
'''
125 // 2  商 62  余 1
62 // 2  商 31  余 0
32 // 2  商 15  余 1
15 // 2  商 7  余 1
7 // 2  商 3  余 1
3 // 2  商 1  余 1
1 // 2  商 0  余 1
按照计算的结果，把余数从低位到高位依此排列
1 1 1 1 1 0 1
'''
# bin() 可以转为 二进制数
# print(bin(125)) # 0b1111101

# 二进制 转 为 十进制
# 按权展开求和
n = 0b1111101
'''
  1111101
1 ==> 1*2**6 ==> 64
1 ==> 1*2**5 ==> 32
1 ==> 1*2**4 ==> 16
1 ==> 1*2**3 ==> 8
1 ==> 1*2**2 ==> 4
0 ==> 0*2**1 ==> 0
1 ==> 1*2**0 ==> 1
'''
# print(64+32+16+8+4+0+1)
# int()转为十进制
# print(int(0b1111101))

# 作业  把十进制的数 转为 二进制 9990977

# & 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
a = 60
b = 13
# print(bin(a),bin(b))
# print(a&b)
'''
111100 
001101

001100
1 1*2**3
1 1*2**2
0 0*2**1
0 0*2**0

12
'''

# | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。
'''
111100 
001101

111101
'''
# print(int(0b111101))
# print(a|b)

#  ^ 按位异或运算符：当两对应的二进位相异时，结果为1
'''
111100 
001101

110001
'''
# print(int(0b110001))
# print(a^b)

# 左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
print(a << 2)
'''
a 
0011 1100
1111 0000


0011 1100
0000 1111
'''
print(a >> 2)
# print(int(0b1111))







